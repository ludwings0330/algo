최적화 문제를 연구하는 수학이론에서 나왔다.

동적 계획법은 큰 의미에서 분할 정복과 같은 접근 방식을 의미한다.
동적 계획법은 처음 주어진 문제를 더 작은 문제들로 나눈뒤 각 조각의 답을 계산하고, 이 답들로부터 원래 문제에 대한
답을 계산해 내기 때문이다.

동적 계획법에서 어떤 부분 문제는 두 개 이상의 문제를 푸는데 사용될 수 있기 때문에,
이 문제의 답을 여러번 계산하는 대신 한 번만 계산하고 계산 결과를 재활용함으로써 속도의 향상을 꾀한다.

★ 각 부분 문제의 답을 메모리에 저장해 두었다가, 재사용한다.


ex) 이항계수 binomial coefficient
(n)  = (n-1) + (n-1)
(r)    (r-1)   ( r )
cache = [[-1]*30 for _ in range(30)]
def bino(n, r):
    if r == 0 or n == r: return 1
    ⭐︎if cache[n][r] != -1: return cache[n][r] # 이미 계산된 값을 재사용함으로써 반복 계산을 줄인다.
    return bino(n-r, r-1) + bino(n-1, r)

⛈ 메모제이션을 적용할 수 없는 경우
  -> 참조적 투명성이 적용되지 않는 경우 즉, 입력이 같은데 외부 요소에 따라 다른 값이 반환된다면 캐싱 X
    * 참조적 투명성 : 함수의 반환 값이 그 입력 값만으로 결정되는지의 여부

🌟 메모제이션 구현 패턴
1. 항상 기저 사례를 제일 먼저 처리한다. (입력의 범위를 벗어난 경우 등)
2. cache가 초기화되어 있는지 확인한다. (cache 가 -1 이라면 계산된 적이 없다는 뜻)
3. return cache[a][b]

🌻 동적 계획법 알고리즘을 만드는 첫 단계는 해당 문제를 재귀적으로 해결하는 완전 탐색 알고리즘을 만드는 것.
1. 주어진 문제를 완전 탐색을 이용해 해결합니다.
2. 중복된 부분 문제를 한 번만 계산하도록 메모제이션을 적용합니다.
* 물론 재귀 호출을 이용하지 않고도 동적 계획법 알고리즘을 구현할 수 있습니다.
  이런 방법을 반복적 동적 계획법이라고 부릅니다.

🌸 전통적 최적화 문제들
- 동적 계획법의 가장 일반적인 사용처는 최적화 문제의 해결입니다.
  (여러 개의 가능한 답 중 가장 좋은 답을 찾아내는 문제는 말한다)
* 최적화 문제를 동적 계획법으로 푸는 것 또한 완전 탐색에서 시작하지만, 최적화 문제에 특정 성질이 성립할 경우에는
  단순히 메모제이션을 적용하기 보다 좀더 효율적으로 동적 계획법을 구현 할 수 있다.
  -> ex 1) 삼각형 위의 최대 경로
     ex 2)

🌼 최적화 문제 동적 계획법 레시피
  1) 모든 답을 만들어 보고 그 중 최적해의 점수를 반환하는 완전 탐색 알고리즘을 설계한다.
  2) 전체 답의 점수를 반환하는 것이 아니라, 앞으로 남은 선택들에 해당하는 점수만을 반환하도록
     부분 문제 정의를 바꿉니다.
  3) 재귀 호출의 입력에 이전의 선택에 관련된 정보가 있다면 꼭 필요한 것만 남기고 줄입니다.
  4) 입력이 배열이거나 문자열인 경우 가능하다면 적절한 변환을 통해 메모제이션할 수 있도록 합니다.
  5) 메모제이션을 적용합니다.

🌺 경우의 수와 확률
   - 동적 계획법은 애초에 최적화 문제를 풀기 위해 고안되었다고 말했습니다만,
     경우의 수를 세거나 확률을 계산하는 문제에도 흔하게 사용됩니다.
     경우의 수를 계산하는 문제는 많은 경우 재귀적인 특징을 가지고 있기 때문이죠.
   ☑  타일링 방법의 수 세

🌹 개인적인 생각으로 동적 계획법은 두가지가 특히 중요한 것 같다. 이 두가지를 얼마나 잘하냐에 따라 문제를 잘 풀 수 있는 것 같다.
   1) 문제의 일반화     ex) count(r, c) = (r, c)에서 시작해 맨 아래줄까지 내려가는 최대 경로의 수
   2) 부분 문제를 해결하는 점화식
       ex) count(y, x) = max( count(y+1, x), count(y+1, x+1), count(y+1, x)+count(y+1, x+1))
   이렇게 두 가지를 잘하면 뭐든지 풀 수 있을 것 같다. 이런 생각을 정리하는 걸 잘 해보자.
          ︎
🐶 동적 계획법 확률
   - 확률과 경우의 수에는 밀접한 관련이 있기 때문에, 많은 경우 확률을 계산하는 문제에도
   동적 계획법을 써먹을 수 있습니다.